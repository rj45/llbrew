// Code generated by "enumer -type=Opcode -transform lower"; DO NOT EDIT.

package rj32

import (
	"fmt"
	"strings"
)

const _OpcodeName = "nopretserrorhaltrcsrwcsrmoveloadcjumpimmcallimm2loadstoreloadbstorebaddsubaddcsubcxorandorshlshrasrifeqifneifltifgeifultifugenotnegsxtswapifgtifleifugtifulereturnnumops"

var _OpcodeIndex = [...]uint8{0, 3, 7, 12, 16, 20, 24, 28, 33, 37, 40, 44, 48, 52, 57, 62, 68, 71, 74, 78, 82, 85, 88, 90, 93, 96, 99, 103, 107, 111, 115, 120, 125, 128, 131, 134, 138, 142, 146, 151, 156, 162, 168}

const _OpcodeLowerName = "nopretserrorhaltrcsrwcsrmoveloadcjumpimmcallimm2loadstoreloadbstorebaddsubaddcsubcxorandorshlshrasrifeqifneifltifgeifultifugenotnegsxtswapifgtifleifugtifulereturnnumops"

func (i Opcode) String() string {
	if i < 0 || i >= Opcode(len(_OpcodeIndex)-1) {
		return fmt.Sprintf("Opcode(%d)", i)
	}
	return _OpcodeName[_OpcodeIndex[i]:_OpcodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpcodeNoOp() {
	var x [1]struct{}
	_ = x[Nop-(0)]
	_ = x[Rets-(1)]
	_ = x[Error-(2)]
	_ = x[Halt-(3)]
	_ = x[Rcsr-(4)]
	_ = x[Wcsr-(5)]
	_ = x[Move-(6)]
	_ = x[Loadc-(7)]
	_ = x[Jump-(8)]
	_ = x[Imm-(9)]
	_ = x[Call-(10)]
	_ = x[Imm2-(11)]
	_ = x[Load-(12)]
	_ = x[Store-(13)]
	_ = x[Loadb-(14)]
	_ = x[Storeb-(15)]
	_ = x[Add-(16)]
	_ = x[Sub-(17)]
	_ = x[Addc-(18)]
	_ = x[Subc-(19)]
	_ = x[Xor-(20)]
	_ = x[And-(21)]
	_ = x[Or-(22)]
	_ = x[Shl-(23)]
	_ = x[Shr-(24)]
	_ = x[Asr-(25)]
	_ = x[IfEq-(26)]
	_ = x[IfNe-(27)]
	_ = x[IfLt-(28)]
	_ = x[IfGe-(29)]
	_ = x[IfUlt-(30)]
	_ = x[IfUge-(31)]
	_ = x[Not-(32)]
	_ = x[Neg-(33)]
	_ = x[Sxt-(34)]
	_ = x[Swap-(35)]
	_ = x[IfGt-(36)]
	_ = x[IfLe-(37)]
	_ = x[IfUgt-(38)]
	_ = x[IfUle-(39)]
	_ = x[Return-(40)]
	_ = x[NumOps-(41)]
}

var _OpcodeValues = []Opcode{Nop, Rets, Error, Halt, Rcsr, Wcsr, Move, Loadc, Jump, Imm, Call, Imm2, Load, Store, Loadb, Storeb, Add, Sub, Addc, Subc, Xor, And, Or, Shl, Shr, Asr, IfEq, IfNe, IfLt, IfGe, IfUlt, IfUge, Not, Neg, Sxt, Swap, IfGt, IfLe, IfUgt, IfUle, Return, NumOps}

var _OpcodeNameToValueMap = map[string]Opcode{
	_OpcodeName[0:3]:          Nop,
	_OpcodeLowerName[0:3]:     Nop,
	_OpcodeName[3:7]:          Rets,
	_OpcodeLowerName[3:7]:     Rets,
	_OpcodeName[7:12]:         Error,
	_OpcodeLowerName[7:12]:    Error,
	_OpcodeName[12:16]:        Halt,
	_OpcodeLowerName[12:16]:   Halt,
	_OpcodeName[16:20]:        Rcsr,
	_OpcodeLowerName[16:20]:   Rcsr,
	_OpcodeName[20:24]:        Wcsr,
	_OpcodeLowerName[20:24]:   Wcsr,
	_OpcodeName[24:28]:        Move,
	_OpcodeLowerName[24:28]:   Move,
	_OpcodeName[28:33]:        Loadc,
	_OpcodeLowerName[28:33]:   Loadc,
	_OpcodeName[33:37]:        Jump,
	_OpcodeLowerName[33:37]:   Jump,
	_OpcodeName[37:40]:        Imm,
	_OpcodeLowerName[37:40]:   Imm,
	_OpcodeName[40:44]:        Call,
	_OpcodeLowerName[40:44]:   Call,
	_OpcodeName[44:48]:        Imm2,
	_OpcodeLowerName[44:48]:   Imm2,
	_OpcodeName[48:52]:        Load,
	_OpcodeLowerName[48:52]:   Load,
	_OpcodeName[52:57]:        Store,
	_OpcodeLowerName[52:57]:   Store,
	_OpcodeName[57:62]:        Loadb,
	_OpcodeLowerName[57:62]:   Loadb,
	_OpcodeName[62:68]:        Storeb,
	_OpcodeLowerName[62:68]:   Storeb,
	_OpcodeName[68:71]:        Add,
	_OpcodeLowerName[68:71]:   Add,
	_OpcodeName[71:74]:        Sub,
	_OpcodeLowerName[71:74]:   Sub,
	_OpcodeName[74:78]:        Addc,
	_OpcodeLowerName[74:78]:   Addc,
	_OpcodeName[78:82]:        Subc,
	_OpcodeLowerName[78:82]:   Subc,
	_OpcodeName[82:85]:        Xor,
	_OpcodeLowerName[82:85]:   Xor,
	_OpcodeName[85:88]:        And,
	_OpcodeLowerName[85:88]:   And,
	_OpcodeName[88:90]:        Or,
	_OpcodeLowerName[88:90]:   Or,
	_OpcodeName[90:93]:        Shl,
	_OpcodeLowerName[90:93]:   Shl,
	_OpcodeName[93:96]:        Shr,
	_OpcodeLowerName[93:96]:   Shr,
	_OpcodeName[96:99]:        Asr,
	_OpcodeLowerName[96:99]:   Asr,
	_OpcodeName[99:103]:       IfEq,
	_OpcodeLowerName[99:103]:  IfEq,
	_OpcodeName[103:107]:      IfNe,
	_OpcodeLowerName[103:107]: IfNe,
	_OpcodeName[107:111]:      IfLt,
	_OpcodeLowerName[107:111]: IfLt,
	_OpcodeName[111:115]:      IfGe,
	_OpcodeLowerName[111:115]: IfGe,
	_OpcodeName[115:120]:      IfUlt,
	_OpcodeLowerName[115:120]: IfUlt,
	_OpcodeName[120:125]:      IfUge,
	_OpcodeLowerName[120:125]: IfUge,
	_OpcodeName[125:128]:      Not,
	_OpcodeLowerName[125:128]: Not,
	_OpcodeName[128:131]:      Neg,
	_OpcodeLowerName[128:131]: Neg,
	_OpcodeName[131:134]:      Sxt,
	_OpcodeLowerName[131:134]: Sxt,
	_OpcodeName[134:138]:      Swap,
	_OpcodeLowerName[134:138]: Swap,
	_OpcodeName[138:142]:      IfGt,
	_OpcodeLowerName[138:142]: IfGt,
	_OpcodeName[142:146]:      IfLe,
	_OpcodeLowerName[142:146]: IfLe,
	_OpcodeName[146:151]:      IfUgt,
	_OpcodeLowerName[146:151]: IfUgt,
	_OpcodeName[151:156]:      IfUle,
	_OpcodeLowerName[151:156]: IfUle,
	_OpcodeName[156:162]:      Return,
	_OpcodeLowerName[156:162]: Return,
	_OpcodeName[162:168]:      NumOps,
	_OpcodeLowerName[162:168]: NumOps,
}

var _OpcodeNames = []string{
	_OpcodeName[0:3],
	_OpcodeName[3:7],
	_OpcodeName[7:12],
	_OpcodeName[12:16],
	_OpcodeName[16:20],
	_OpcodeName[20:24],
	_OpcodeName[24:28],
	_OpcodeName[28:33],
	_OpcodeName[33:37],
	_OpcodeName[37:40],
	_OpcodeName[40:44],
	_OpcodeName[44:48],
	_OpcodeName[48:52],
	_OpcodeName[52:57],
	_OpcodeName[57:62],
	_OpcodeName[62:68],
	_OpcodeName[68:71],
	_OpcodeName[71:74],
	_OpcodeName[74:78],
	_OpcodeName[78:82],
	_OpcodeName[82:85],
	_OpcodeName[85:88],
	_OpcodeName[88:90],
	_OpcodeName[90:93],
	_OpcodeName[93:96],
	_OpcodeName[96:99],
	_OpcodeName[99:103],
	_OpcodeName[103:107],
	_OpcodeName[107:111],
	_OpcodeName[111:115],
	_OpcodeName[115:120],
	_OpcodeName[120:125],
	_OpcodeName[125:128],
	_OpcodeName[128:131],
	_OpcodeName[131:134],
	_OpcodeName[134:138],
	_OpcodeName[138:142],
	_OpcodeName[142:146],
	_OpcodeName[146:151],
	_OpcodeName[151:156],
	_OpcodeName[156:162],
	_OpcodeName[162:168],
}

// OpcodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpcodeString(s string) (Opcode, error) {
	if val, ok := _OpcodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpcodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Opcode values", s)
}

// OpcodeValues returns all values of the enum
func OpcodeValues() []Opcode {
	return _OpcodeValues
}

// OpcodeStrings returns a slice of all String values of the enum
func OpcodeStrings() []string {
	strs := make([]string, len(_OpcodeNames))
	copy(strs, _OpcodeNames)
	return strs
}

// IsAOpcode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Opcode) IsAOpcode() bool {
	for _, v := range _OpcodeValues {
		if i == v {
			return true
		}
	}
	return false
}
