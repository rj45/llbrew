// Code generated by "enumer -type=Op -transform title-lower"; DO NOT EDIT.

package op

import (
	"fmt"
	"strings"
)

const _OpName = "invalidretifjumpswitchindirectBrinvokeunreachablefCmpequalnotEquallesslessEqualgreatergreaterEqualuLessuLessEqualuGreateruGreaterEqualaddfAddsubfSubmulfMuluDivsDivfDivuRemsRemfRemshllShraShrandorxorallocaloadstoregetElementPtrtrunczExtsExtfPToUIfPToSIuIToFPsIToFPfPTruncfPExtptrToIntintToPtrbitCastcallselectcopyvAArgextractElementinsertElementshuffleVectorextractValueinsertValuenumOps"

var _OpIndex = [...]uint16{0, 7, 10, 12, 16, 22, 32, 38, 49, 53, 58, 66, 70, 79, 86, 98, 103, 113, 121, 134, 137, 141, 144, 148, 151, 155, 159, 163, 167, 171, 175, 179, 182, 186, 190, 193, 195, 198, 204, 208, 213, 226, 231, 235, 239, 245, 251, 257, 263, 270, 275, 283, 291, 298, 302, 308, 312, 317, 331, 344, 357, 369, 380, 386}

const _OpLowerName = "invalidretifjumpswitchindirectbrinvokeunreachablefcmpequalnotequallesslessequalgreatergreaterequalulessulessequalugreaterugreaterequaladdfaddsubfsubmulfmuludivsdivfdivuremsremfremshllshrashrandorxorallocaloadstoregetelementptrtrunczextsextfptouifptosiuitofpsitofpfptruncfpextptrtointinttoptrbitcastcallselectcopyvaargextractelementinsertelementshufflevectorextractvalueinsertvaluenumops"

func (i Op) String() string {
	if i >= Op(len(_OpIndex)-1) {
		return fmt.Sprintf("Op(%d)", i)
	}
	return _OpName[_OpIndex[i]:_OpIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[Ret-(1)]
	_ = x[If-(2)]
	_ = x[Jump-(3)]
	_ = x[Switch-(4)]
	_ = x[IndirectBr-(5)]
	_ = x[Invoke-(6)]
	_ = x[Unreachable-(7)]
	_ = x[FCmp-(8)]
	_ = x[Equal-(9)]
	_ = x[NotEqual-(10)]
	_ = x[Less-(11)]
	_ = x[LessEqual-(12)]
	_ = x[Greater-(13)]
	_ = x[GreaterEqual-(14)]
	_ = x[ULess-(15)]
	_ = x[ULessEqual-(16)]
	_ = x[UGreater-(17)]
	_ = x[UGreaterEqual-(18)]
	_ = x[Add-(19)]
	_ = x[FAdd-(20)]
	_ = x[Sub-(21)]
	_ = x[FSub-(22)]
	_ = x[Mul-(23)]
	_ = x[FMul-(24)]
	_ = x[UDiv-(25)]
	_ = x[SDiv-(26)]
	_ = x[FDiv-(27)]
	_ = x[URem-(28)]
	_ = x[SRem-(29)]
	_ = x[FRem-(30)]
	_ = x[Shl-(31)]
	_ = x[LShr-(32)]
	_ = x[AShr-(33)]
	_ = x[And-(34)]
	_ = x[Or-(35)]
	_ = x[Xor-(36)]
	_ = x[Alloca-(37)]
	_ = x[Load-(38)]
	_ = x[Store-(39)]
	_ = x[GetElementPtr-(40)]
	_ = x[Trunc-(41)]
	_ = x[ZExt-(42)]
	_ = x[SExt-(43)]
	_ = x[FPToUI-(44)]
	_ = x[FPToSI-(45)]
	_ = x[UIToFP-(46)]
	_ = x[SIToFP-(47)]
	_ = x[FPTrunc-(48)]
	_ = x[FPExt-(49)]
	_ = x[PtrToInt-(50)]
	_ = x[IntToPtr-(51)]
	_ = x[BitCast-(52)]
	_ = x[Call-(53)]
	_ = x[Select-(54)]
	_ = x[Copy-(55)]
	_ = x[VAArg-(56)]
	_ = x[ExtractElement-(57)]
	_ = x[InsertElement-(58)]
	_ = x[ShuffleVector-(59)]
	_ = x[ExtractValue-(60)]
	_ = x[InsertValue-(61)]
	_ = x[NumOps-(62)]
}

var _OpValues = []Op{Invalid, Ret, If, Jump, Switch, IndirectBr, Invoke, Unreachable, FCmp, Equal, NotEqual, Less, LessEqual, Greater, GreaterEqual, ULess, ULessEqual, UGreater, UGreaterEqual, Add, FAdd, Sub, FSub, Mul, FMul, UDiv, SDiv, FDiv, URem, SRem, FRem, Shl, LShr, AShr, And, Or, Xor, Alloca, Load, Store, GetElementPtr, Trunc, ZExt, SExt, FPToUI, FPToSI, UIToFP, SIToFP, FPTrunc, FPExt, PtrToInt, IntToPtr, BitCast, Call, Select, Copy, VAArg, ExtractElement, InsertElement, ShuffleVector, ExtractValue, InsertValue, NumOps}

var _OpNameToValueMap = map[string]Op{
	_OpName[0:7]:          Invalid,
	_OpLowerName[0:7]:     Invalid,
	_OpName[7:10]:         Ret,
	_OpLowerName[7:10]:    Ret,
	_OpName[10:12]:        If,
	_OpLowerName[10:12]:   If,
	_OpName[12:16]:        Jump,
	_OpLowerName[12:16]:   Jump,
	_OpName[16:22]:        Switch,
	_OpLowerName[16:22]:   Switch,
	_OpName[22:32]:        IndirectBr,
	_OpLowerName[22:32]:   IndirectBr,
	_OpName[32:38]:        Invoke,
	_OpLowerName[32:38]:   Invoke,
	_OpName[38:49]:        Unreachable,
	_OpLowerName[38:49]:   Unreachable,
	_OpName[49:53]:        FCmp,
	_OpLowerName[49:53]:   FCmp,
	_OpName[53:58]:        Equal,
	_OpLowerName[53:58]:   Equal,
	_OpName[58:66]:        NotEqual,
	_OpLowerName[58:66]:   NotEqual,
	_OpName[66:70]:        Less,
	_OpLowerName[66:70]:   Less,
	_OpName[70:79]:        LessEqual,
	_OpLowerName[70:79]:   LessEqual,
	_OpName[79:86]:        Greater,
	_OpLowerName[79:86]:   Greater,
	_OpName[86:98]:        GreaterEqual,
	_OpLowerName[86:98]:   GreaterEqual,
	_OpName[98:103]:       ULess,
	_OpLowerName[98:103]:  ULess,
	_OpName[103:113]:      ULessEqual,
	_OpLowerName[103:113]: ULessEqual,
	_OpName[113:121]:      UGreater,
	_OpLowerName[113:121]: UGreater,
	_OpName[121:134]:      UGreaterEqual,
	_OpLowerName[121:134]: UGreaterEqual,
	_OpName[134:137]:      Add,
	_OpLowerName[134:137]: Add,
	_OpName[137:141]:      FAdd,
	_OpLowerName[137:141]: FAdd,
	_OpName[141:144]:      Sub,
	_OpLowerName[141:144]: Sub,
	_OpName[144:148]:      FSub,
	_OpLowerName[144:148]: FSub,
	_OpName[148:151]:      Mul,
	_OpLowerName[148:151]: Mul,
	_OpName[151:155]:      FMul,
	_OpLowerName[151:155]: FMul,
	_OpName[155:159]:      UDiv,
	_OpLowerName[155:159]: UDiv,
	_OpName[159:163]:      SDiv,
	_OpLowerName[159:163]: SDiv,
	_OpName[163:167]:      FDiv,
	_OpLowerName[163:167]: FDiv,
	_OpName[167:171]:      URem,
	_OpLowerName[167:171]: URem,
	_OpName[171:175]:      SRem,
	_OpLowerName[171:175]: SRem,
	_OpName[175:179]:      FRem,
	_OpLowerName[175:179]: FRem,
	_OpName[179:182]:      Shl,
	_OpLowerName[179:182]: Shl,
	_OpName[182:186]:      LShr,
	_OpLowerName[182:186]: LShr,
	_OpName[186:190]:      AShr,
	_OpLowerName[186:190]: AShr,
	_OpName[190:193]:      And,
	_OpLowerName[190:193]: And,
	_OpName[193:195]:      Or,
	_OpLowerName[193:195]: Or,
	_OpName[195:198]:      Xor,
	_OpLowerName[195:198]: Xor,
	_OpName[198:204]:      Alloca,
	_OpLowerName[198:204]: Alloca,
	_OpName[204:208]:      Load,
	_OpLowerName[204:208]: Load,
	_OpName[208:213]:      Store,
	_OpLowerName[208:213]: Store,
	_OpName[213:226]:      GetElementPtr,
	_OpLowerName[213:226]: GetElementPtr,
	_OpName[226:231]:      Trunc,
	_OpLowerName[226:231]: Trunc,
	_OpName[231:235]:      ZExt,
	_OpLowerName[231:235]: ZExt,
	_OpName[235:239]:      SExt,
	_OpLowerName[235:239]: SExt,
	_OpName[239:245]:      FPToUI,
	_OpLowerName[239:245]: FPToUI,
	_OpName[245:251]:      FPToSI,
	_OpLowerName[245:251]: FPToSI,
	_OpName[251:257]:      UIToFP,
	_OpLowerName[251:257]: UIToFP,
	_OpName[257:263]:      SIToFP,
	_OpLowerName[257:263]: SIToFP,
	_OpName[263:270]:      FPTrunc,
	_OpLowerName[263:270]: FPTrunc,
	_OpName[270:275]:      FPExt,
	_OpLowerName[270:275]: FPExt,
	_OpName[275:283]:      PtrToInt,
	_OpLowerName[275:283]: PtrToInt,
	_OpName[283:291]:      IntToPtr,
	_OpLowerName[283:291]: IntToPtr,
	_OpName[291:298]:      BitCast,
	_OpLowerName[291:298]: BitCast,
	_OpName[298:302]:      Call,
	_OpLowerName[298:302]: Call,
	_OpName[302:308]:      Select,
	_OpLowerName[302:308]: Select,
	_OpName[308:312]:      Copy,
	_OpLowerName[308:312]: Copy,
	_OpName[312:317]:      VAArg,
	_OpLowerName[312:317]: VAArg,
	_OpName[317:331]:      ExtractElement,
	_OpLowerName[317:331]: ExtractElement,
	_OpName[331:344]:      InsertElement,
	_OpLowerName[331:344]: InsertElement,
	_OpName[344:357]:      ShuffleVector,
	_OpLowerName[344:357]: ShuffleVector,
	_OpName[357:369]:      ExtractValue,
	_OpLowerName[357:369]: ExtractValue,
	_OpName[369:380]:      InsertValue,
	_OpLowerName[369:380]: InsertValue,
	_OpName[380:386]:      NumOps,
	_OpLowerName[380:386]: NumOps,
}

var _OpNames = []string{
	_OpName[0:7],
	_OpName[7:10],
	_OpName[10:12],
	_OpName[12:16],
	_OpName[16:22],
	_OpName[22:32],
	_OpName[32:38],
	_OpName[38:49],
	_OpName[49:53],
	_OpName[53:58],
	_OpName[58:66],
	_OpName[66:70],
	_OpName[70:79],
	_OpName[79:86],
	_OpName[86:98],
	_OpName[98:103],
	_OpName[103:113],
	_OpName[113:121],
	_OpName[121:134],
	_OpName[134:137],
	_OpName[137:141],
	_OpName[141:144],
	_OpName[144:148],
	_OpName[148:151],
	_OpName[151:155],
	_OpName[155:159],
	_OpName[159:163],
	_OpName[163:167],
	_OpName[167:171],
	_OpName[171:175],
	_OpName[175:179],
	_OpName[179:182],
	_OpName[182:186],
	_OpName[186:190],
	_OpName[190:193],
	_OpName[193:195],
	_OpName[195:198],
	_OpName[198:204],
	_OpName[204:208],
	_OpName[208:213],
	_OpName[213:226],
	_OpName[226:231],
	_OpName[231:235],
	_OpName[235:239],
	_OpName[239:245],
	_OpName[245:251],
	_OpName[251:257],
	_OpName[257:263],
	_OpName[263:270],
	_OpName[270:275],
	_OpName[275:283],
	_OpName[283:291],
	_OpName[291:298],
	_OpName[298:302],
	_OpName[302:308],
	_OpName[308:312],
	_OpName[312:317],
	_OpName[317:331],
	_OpName[331:344],
	_OpName[344:357],
	_OpName[357:369],
	_OpName[369:380],
	_OpName[380:386],
}

// OpString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpString(s string) (Op, error) {
	if val, ok := _OpNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Op values", s)
}

// OpValues returns all values of the enum
func OpValues() []Op {
	return _OpValues
}

// OpStrings returns a slice of all String values of the enum
func OpStrings() []string {
	strs := make([]string, len(_OpNames))
	copy(strs, _OpNames)
	return strs
}

// IsAOp returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Op) IsAOp() bool {
	for _, v := range _OpValues {
		if i == v {
			return true
		}
	}
	return false
}
